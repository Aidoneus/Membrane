{"version":3,"file":"membrane.min.js","mappings":"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","sources":["webpack://membrane/external node-commonjs \"fs\"","webpack://membrane/external node-commonjs \"http\"","webpack://membrane/external node-commonjs \"https\"","webpack://membrane/external node-commonjs \"net\"","webpack://membrane/external node-commonjs \"path\"","webpack://membrane/webpack/bootstrap","webpack://membrane/./src/membrane.js"],"sourcesContent":["module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"net\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&dn=expat.txt Expat\n/**\n * @prettier\n */\n\"use strict\";\n\n/**\n * @typedef {Object} VangersGame\n * @property {number} [id]\n * @property {string} name - Displayed name of the game\n * @property {number} players - Number of players currently in the game\n * @property {string} mode - Localized name of the game mode\n * @property {number} time - Lifetime of the game in seconds\n * @property {boolean} isNew - `true` if this game was not present during in\n * the previous Vangers server's response to `requestGames(...)`\n */\n\n/**\n * @typedef {Object} VangersUpperLevelClient\n * @property {Socket} client\n * @property {string} host\n * @property {number} port\n * @property {number} type\n * @property {number} protocol\n * @property {Object.<string, VangersGame>} games\n * @property {(null|number)} lastTimeout\n * @property {boolean} alive\n * @property {boolean} gamesRead\n */\n\nconst { Socket } = require(\"net\");\nconst { request /* createServerS as createServer*/ } = require(\"https\");\nconst { createServer } = require(\"http\");\nconst { existsSync, readFileSync } = require(\"fs\");\nconst { dirname, basename } = require(\"path\");\n// <editor-fold desc=\"Constants\">\nconst dir = dirname(__filename);\nconst scriptFile = basename(__filename);\nconst args = process.argv.slice(2);\nconst argsI = [\n  args.indexOf(\"--help\"),\n  args.indexOf(\"-h\"),\n  args.indexOf(\"--silent\"),\n  args.indexOf(\"-s\"),\n];\nconst argHelp = argsI[0] >= 0 || argsI[1] >= 0;\nconst argSilent = argsI[2] >= 0 || argsI[3] >= 0;\n/**\n   * @type {Object}\n   * @property {Object.<string, number>} types\n   * @property {{host: string, port: number, type: number, protocol: string}[]} servers\n   * @property {number} reconnectTimeout\n   * @property {number} gameRequestTimeout\n   * @property {number} gameRequestCooldown\n   * @property {string[]} gameModes\n   * @property {string[]} gameLetters\n   * @property {string} tgToken\n   * @property {number} tgPort\n   * @property {number} tgSendTimeout\n   * @property {number[]} tgChats\n   * @property {string} redirectHost\n   * @property {number} redirectPort\n   * @property {number} censorSensitivity\n   * @property {number} exceptionSensitivity\n   */\nconst M = {};\nconst configPath = dir + \"/membrane.json\";\n// Based on https://code.google.com/archive/p/badwordslist/downloads\nconst badWordsLatinPath = dir + \"/bad_words_latin.txt\";\n// Based on https://github.com/bars38/Russian_ban_words\nconst badWordsCyrillicPath = dir + \"/bad_words_cyrillic.txt\";\nconst exceptionsLatinPath = dir + \"/exceptions_latin.txt\";\nconst exceptionsCyrillicPath = dir + \"/exceptions_cyrillic.txt\";\nconst cp866 = `АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп${\" \".repeat(\n  48,\n)}рстуфхцчшщъыьэюяЁё${\" \".repeat(14)}`;\n  /**\n   * @type {Map<string, VangersUpperLevelClient>}\n   */\nconst clientPool = new Map();\n/**\n   * @type {((function(string, (Buffer|string), number): Promise<void>)|function(string, (Buffer|string), number))[]}\n   */\nconst reactions = [\n  () => {}, // Default reaction to anything else, e.g. clientKey => { doSomething(); },\n  handshake,\n  receiveGames,\n];\n  /* eslint-disable-next-line valid-jsdoc */\n  /**\n   * @type {(function(string, string, number, number): boolean)[]}\n   */\nconst conditions = [\n  (clientKey, dataString, dataLength, code) =>\n    dataString ===\n      `Enter, my son, please...\\x00${clientPool.get(clientKey).protocol}`,\n  (clientKey, dataString, dataLength, code) => dataLength && code === 0xc1,\n];\n  /**\n   * @type {{cyr: string[], lat: string[]}}\n   */\nconst badWords = { cyr: [], lat: [] };\n/**\n   * @type {{cyr: string[], lat: string[]}}\n   */\nconst exceptionWords = { cyr: [], lat: [] };\n/**\n   * @type {{cyr: Object.<string, string>, lat: Object.<string, string>}}\n   */\nconst censorCharmap = {\n  lat: {\n    a: [\"a\", \"а\", \"@\"],\n    b: [\"b\", \"6\"],\n    c: [\"c\", \"с\", \"(\"],\n    d: [\"d\"],\n    e: [\"e\", \"е\"],\n    f: [\"f\"],\n    g: [\"g\"],\n    h: [\"h\", \"н\"],\n    i: [\"i\", \"!\"],\n    j: [\"j\"],\n    k: [\"k\", \"к\"],\n    l: [\"l\"],\n    m: [\"m\", \"м\"],\n    n: [\"n\", \"п\"],\n    o: [\"o\", \"о\"],\n    p: [\"p\", \"р\"],\n    q: [\"q\"],\n    r: [\"r\", \"г\"],\n    s: [\"s\", \"$\"],\n    t: [\"t\", \"+\", \"7\", \"т\"],\n    u: [\"u\", \"и\", \"ц\"],\n    v: [\"v\"],\n    w: [\"w\"],\n    x: [\"x\", \"х\"],\n    y: [\"y\", \"у\"],\n    z: [\"z\"],\n  },\n  cyr: {\n    а: [\"а\", \"a\", \"@\"],\n    б: [\"б\", \"6\", \"b\"],\n    в: [\"в\", \"b\", \"v\"],\n    г: [\"г\", \"r\", \"g\"],\n    д: [\"д\", \"d\", \"g\"],\n    е: [\"е\", \"e\"],\n    ё: [\"ё\", \"e\"],\n    ж: [\"ж\" /* , 'zh'*/, \"*\"],\n    з: [\"з\", \"3\", \"z\"],\n    и: [\"и\", \"u\", \"i\"],\n    й: [\"й\", \"u\", \"i\", \"y\"],\n    к: [\"к\", \"k\"],\n    л: [\"л\", \"l\"],\n    м: [\"м\", \"m\"],\n    н: [\"н\", \"h\", \"n\"],\n    о: [\"о\", \"o\", \"0\"],\n    п: [\"п\", \"n\", \"p\"],\n    р: [\"р\", \"r\", \"p\"],\n    с: [\"с\", \"c\", \"s\", \"(\"],\n    т: [\"т\", \"m\", \"t\", \"+\"],\n    у: [\"у\", \"y\", \"u\"],\n    ф: [\"ф\", \"f\"],\n    х: [\"х\", \"x\", \"h\"],\n    ц: [\"ц\", \"c\"],\n    ч: [\"ч\", /* 'ch',*/ \"4\"],\n    ш: [\"ш\"],\n    щ: [\"щ\"],\n    ь: [\"ь\", \"b\"],\n    ы: [\"ы\"],\n    ъ: [\"ъ\"],\n    э: [\"э\", \"e\"],\n    ю: [\"ю\"],\n    я: [\"я\" /* , 'ya'*/, \"r\"],\n  },\n};\n  // tgStack = [],\nconst redirectServerOptions = {\n  /* no specific options for now */\n};\n\n/**\n * @type {Server}\n */\nlet webServer;\n// </editor-fold>\n\n/* elint-disable valid-jsdoc */\n// <editor-fold desc=\"String functions\">\n/**\n * Function used for default output.\n * @param a - The same arguments one would pass to `console.log(...)`\n */\n/* elint-enable valid-jsdoc */\nfunction log(...a) {\n  if (argSilent) return;\n  const date = new Date();\n  const msg = [\n    \"FullYear\",\n    \"Month\",\n    \"Date\",\n    \"Hours\",\n    \"Minutes\",\n    \"Seconds\",\n    \"Milliseconds\",\n  ]\n    .map((m, i) =>\n      pad(date[`getUTC${m}`]() + (i === 1 ? 1 : 0), !i || i === 6 ? 4 : 2),\n    )\n    .reduce((p, c, i) => p + c + \".. ::: \"[i], \"\");\n\n  console.log(msg, ...a);\n}\n\n/**\n * Encode a single character to CP-866.\n * @param {string} char\n * @return {number} - CP-866 byte\n */\nfunction encodeChar(char) {\n  if (char === \" \") return 32;\n  const i = cp866.indexOf(char);\n  return !~char ? char.charCodeAt(0) : i + 128;\n}\n\n/**\n * Decode a single CP-866 byte to character.\n * @param {number} code - CP-866 byte\n * @return {string}\n */\nfunction decodeChar(code) {\n  return code < 128 ? String.fromCharCode(code) : cp866[code - 128];\n}\n\n/**\n * Encode a string to CP-866.\n * @param {string} charString\n * @return {number[]} - CP-866 bytes\n */\n/* eslint-disable-next-line no-unused-vars */\nfunction encodeString(charString) {\n  return Array.prototype.map.call(charString, (char) => encodeChar(char));\n}\n\n/**\n * Decode an array of CP-866 bytes to string.\n * @param {number[]} codeArray\n * @return {string}\n */\nfunction decodeArray(codeArray) {\n  return codeArray.reduce((str, code) => str + decodeChar(code), \"\");\n}\n\n/**\n * Converts a number to string and pads its with zeroes (useful in formatting output).\n * @param {number} value\n * @param {number} length\n * @return {string}\n */\nfunction pad(value, length = 2) {\n  return value.toString(10).padStart(length, \"0\");\n}\n\n/**\n * Generates a string of specified length with random rectangles.\n * @param {number} length\n * @return {string}\n */\nfunction getRndString(length) {\n  let result = \"\";\n  for (let i = 0; i < length; i += 1) {\n    result += \"█▄▀\"[(Math.random() * 3) | 0];\n  }\n  return result;\n}\n\n/**\n * Wagner-Fischer algorithm implementation for calculating the Levenshtein\n * distance with some optimizations.\n * @param {string} a\n * @param {string} b\n * @return {number}\n */\nfunction distance(a, b) {\n  const m = a.length;\n  const n = b.length;\n  const d = [[], []];\n  const c = [0, 0, 0];\n  let i = 0;\n  let j = 0;\n  let r1 = 0;\n  let r2 = 1;\n  for (j = 0; j <= n; j++) d[1][j] = j;\n  for (i = 1; i <= m; i++) {\n    r1 = +!r1;\n    r2 = +!r2;\n    d[r2][0] = i;\n    for (j = 1; j <= n; j++) {\n      c[0] = d[r1][j] + 1;\n      c[1] = d[r2][j - 1] + 1;\n      c[2] = d[r1][j - 1] + (a[i - 1] === b[j - 1] ? 0 : 1);\n      d[r2][j] = Math.min(c[0], c[1], c[2]);\n    }\n  }\n  return d[r2][n];\n}\n\n/**\n * Filters inappropriate words according to global dictionaries.<br>\n * Based on: https://habr.com/ru/sandbox/145868/\n * @param {string} src\n * @return {string}\n */\nfunction censor(src) {\n  // todo Due to possible usage of one symbol as a replacement for multiple\n  //  different ones there should be a way to form alternate possible strings\n  //  with different __order__ of replacements\n  // todo You can replace spaces in the source string with \"\", but you should\n  //  somehow keep track of the original __range__ in the src that was occupied\n  //  by the filtered string\n  const censorData = [];\n  const exceptionData = [];\n  let i = 0;\n  let realStr = \"\";\n  let tmpStr = \"\";\n  let tmpWord = \"\";\n\n  [\"cyr\", \"lat\"].forEach((type) => {\n    realStr = src.slice().toLowerCase();\n    exceptionWords[type].forEach((word) => {\n      tmpWord = word.toLowerCase();\n      for (i = 0; i <= realStr.length - word.length; i += 1) {\n        tmpStr = realStr.slice(i, i + word.length);\n        if (\n          distance(tmpStr, tmpWord) <=\n          tmpWord.length * M.exceptionSensitivity\n        ) {\n          log(\n            `[filter exception] Found word \"${word}\" as \"${tmpStr}\" in string \"${src}\"`,\n          );\n          exceptionData.push([i, src.slice(i, i + word.length)]);\n          realStr =\n            realStr.slice(0, i) +\n            \" \".repeat(word.length) +\n            realStr.slice(i + word.length);\n        }\n      }\n    });\n    Object.entries(censorCharmap[type]).forEach(\n      ([realLetter, replacementList]) => {\n        replacementList.forEach((replacement) => {\n          // todo Keep note of how many extra symbols this specific replacement\n          //  inserted and make use of it below in the badWords.forEach(...) cycle\n          for (i = 0; i < src.length; i += 1) {\n            realStr = realStr.replaceAll(replacement, realLetter);\n          }\n        });\n      },\n    );\n    badWords[type].forEach((word) => {\n      tmpWord = word.toLowerCase();\n      for (i = 0; i <= realStr.length - word.length; i += 1) {\n        tmpStr = realStr.slice(i, i + word.length);\n        if (distance(tmpStr, tmpWord) <= tmpWord.length * M.censorSensitivity) {\n          log(\n            `[filter censor] Found word \"${word}\" as \"${tmpStr}\" in string \"${src}\"`,\n          );\n          censorData.push([i, i + word.length]);\n        }\n      }\n    });\n  });\n\n  tmpStr = src.slice();\n  censorData.forEach(([strStart, strEnd]) => {\n    tmpStr =\n      tmpStr.slice(0, strStart) +\n      getRndString(strEnd - strStart) +\n      tmpStr.slice(strEnd);\n  });\n  exceptionData.forEach(([strStart, str]) => {\n    tmpStr =\n      tmpStr.slice(0, strStart) + str + tmpStr.slice(strStart + str.length);\n  });\n\n  return tmpStr;\n}\n// </editor-fold>\n\n// <editor-fold desc=\"File functions\">\n/**\n * Reads the text file from the `fp` path and splits it by linebreaks into array.\n * @param {string} fp\n * @return {string[]}\n */\nfunction readArray(fp) {\n  return readFileSync(fp, { encoding: \"utf8\", flag: \"r\" }).split(\"\\n\");\n}\n\n/**\n * Reads the text file from the `fp` path and parses it as JSON.\n * @param {string} fp\n * @return {Object}\n */\nfunction readJson(fp) {\n  return JSON.parse(readFileSync(fp, { encoding: \"utf8\", flag: \"r\" }));\n}\n// </editor-fold>\n\n// <editor-fold desc=\"Vangers network functions\">\n/**\n * Initializes a socket, fills corresponding data and setups the lifecycle for\n * a connection to a Vangers server.\n * @param {string} clientKey\n * @param {string} host\n * @param {number} port\n * @param {number} type\n * @param {number} protocol\n */\nfunction initClient(clientKey, { host, port, type, protocol }) {\n  if (clientPool.get(clientKey)?.alive) return;\n  log(`[${clientKey}] initClient`);\n  const client = new Socket();\n  clientPool.set(clientKey, {\n    client,\n    host,\n    port,\n    type,\n    protocol,\n    games: {},\n    lastTimeout: null,\n    alive: true,\n    gamesRead: false,\n  });\n  client.on(\"data\", async function(data) {\n    const dataString = data.toString();\n    const dataBuffer = data;\n    const dataLength = dataBuffer.readUInt16LE(0);\n    let pos = 2;\n    let code;\n    if (dataLength) {\n      code = dataBuffer.readUInt8(pos);\n      pos += 1;\n    }\n    reactions[\n      conditions.findIndex(\n        (c) => !!c(clientKey, dataString, dataLength, code),\n      ) + 1\n    ](clientKey, dataBuffer, pos);\n  });\n  client.on(\"error\", function() {\n    log(`[${clientKey}] error`);\n    disconnect(clientKey);\n  });\n  client.on(\"timeout\", function() {\n    log(`[${clientKey}] timeout`);\n    disconnect(clientKey);\n  });\n  client.on(\"close\", function() {\n    log(\n      `[${clientKey}] connection closed, try again in ${\n        M.reconnectTimeout / 1000 / 60\n      } min`,\n    );\n    clientPool.get(clientKey).alive = false;\n    globalThis.clearTimeout(clientPool.get(clientKey).lastTimeout);\n    clientPool.get(clientKey).lastTimeout = globalThis.setTimeout(\n      () => initClient(clientKey, { host, port, type, protocol }),\n      M.reconnectTimeout,\n    );\n  });\n  connect(clientKey);\n}\n\n/**\n * Connect to a Vangers server.\n * @param {string} clientKey\n */\nfunction connect(clientKey) {\n  const { port, host, protocol, client } = clientPool.get(clientKey);\n  client.connect(port, host, () => {\n    client.write(`Vivat Sicher, Rock\\'n\\'Roll forever!!!\\x00${protocol}`);\n  });\n}\n\n/* elint-disable valid-jsdoc */\n/**\n * Disconnect from a Vangers server.\n * @param clientKey\n */\n/* elint-enable valid-jsdoc */\nfunction disconnect(clientKey) {\n  send(clientKey, 0x86, Buffer.alloc(0));\n  clientPool.get(clientKey).client.destroy();\n}\n\n/**\n * Sends the packet to a Vangers server.\n * @param {string} clientKey\n * @param {number} code\n * @param {Buffer} dataBuffer\n */\nfunction send(clientKey, code, dataBuffer) {\n  const lengthBuffer = Buffer.alloc(2);\n  lengthBuffer.writeInt16LE(1 + dataBuffer.length); // 1 = code buffer's length\n  clientPool\n    .get(clientKey)\n    .client.write(\n      Buffer.concat([lengthBuffer, Buffer.from([code]), dataBuffer]),\n    );\n}\n\n/* eslint-disable valid-jsdoc */\n/**\n * Reaction to successfully connecting to a Vangers server.\n * @param clientKey\n * @return {Promise<void>}\n */\n/* eslint-enable valid-jsdoc */\nasync function handshake(clientKey) {\n  log(`[${clientKey}] handshake`);\n  requestGames(clientKey);\n}\n\n/**\n * Send request to a Vangers server for the list of current games.\n * @param {string} clientKey\n */\nfunction requestGames(clientKey) {\n  send(clientKey, 0x81, Buffer.alloc(0));\n}\n\n/**\n * Reaction to successfully receiving the list of current games.\n * @param {string} clientKey\n * @param {Buffer|string} dataBuffer\n * @param {number} pos\n * @return {Promise<void>}\n */\nasync function receiveGames(clientKey, dataBuffer, pos) {\n  const /**\n     * @type {Object.<string, VangersGame>}\n     */\n    games = {};\n  const gamesCount = dataBuffer.readUInt8(pos);\n  /**\n     * @type {VangersUpperLevelClient}\n     */\n  const client = clientPool.get(clientKey);\n  /**\n     * @type {Object.<string, VangersGame>}\n     */\n  const oldGames = client.games;\n  /**\n     * @type {VangersGame[]}\n     */\n  const newGames = [];\n  let gameIndex = 0;\n  while (pos < dataBuffer.length && gameIndex < gamesCount) {\n    const gameName = [];\n    let tmpName = \"\";\n    const id = dataBuffer.readUInt32LE(pos + 1);\n    pos += 5;\n    while (dataBuffer[pos] !== 0) {\n      gameName.push(dataBuffer[pos]);\n      pos += 1;\n    }\n    tmpName = decodeArray(gameName);\n    tmpName = tmpName.split(\" \");\n    games[id] = {\n      name: tmpName\n        .filter((e, i) => i < tmpName.length - 3)\n        .join(\" \")\n        .slice(0, -1),\n      players: Number.parseInt(tmpName[tmpName.length - 3], 10),\n      mode: M.gameModes[M.gameLetters.indexOf(tmpName[tmpName.length - 2])],\n      // todo Use both the time told by server and time measured by Membrane\n      //  to approximate a more realistic lifetime of a game, that'd allow\n      //  to resume tracking lifetime of games after Membrane restarts\n      // in seconds\n      time: tmpName[tmpName.length - 1]\n        .split(\":\")\n        .reduce((a, c, i) => a + c * [3600, 60, 1][i], 0),\n      isNew: !client.gamesRead ? false : !oldGames[id],\n    };\n    gameIndex += 1;\n  }\n  log(`[${clientKey}] games:`, games);\n\n  Object.entries(games).forEach(([gameId, gameData]) => {\n    if (gameData.isNew) newGames.push({ ...gameData, id: gameId });\n  });\n  if (newGames.length) {\n    sendToTgChat(\n      M.tgChats[0],\n      (newGames.length > 1 ?\n        `Созданы новые игры:${newGames.reduce(\n          (acc, gameData) => acc + \"\\n\" + getTgGameLink(client, gameData),\n          \"\",\n        )}` :\n        `Создана новая игра: ${getTgGameLink(client, newGames[0])}`) +\n        \"\\n\\nНажмите по названию игры, чтобы присоединиться к ней (требуется установленная из Steam игра)\",\n    );\n  }\n\n  client.games = games;\n  client.gamesRead = true;\n  globalThis.clearTimeout(client.lastTimeout);\n  client.lastTimeout = globalThis.setTimeout(\n    () => requestGames(clientKey),\n    // todo Timeout here should always be the same; \"gameRequestCooldown\"\n    //  instead needs to be used just for TG messages (above, when\n    //  sendToTgChat(...) is called)\n    newGames.length ? M.gameRequestCooldown : M.gameRequestTimeout,\n  );\n}\n// </editor-fold>\n\n// <editor-fold desc=\"Telegram network functions\">\n/**\n * Send a Telegram text message to the specified chat.\n * @param {number} chatId\n * @param {string} content\n */\nfunction sendToTgChat(chatId, content) {\n  log(`[tg] sendToChat ${chatId}: ${content}`);\n  const json = JSON.stringify({\n    chat_id: chatId,\n    parse_mode: \"HTML\",\n    disable_web_page_preview: true,\n    text: content,\n  });\n  const req = request(\n    {\n      host: \"api.telegram.org\",\n      port: M.tgPort,\n      path: `/bot${M.tgToken}/sendMessage`,\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    receiveTgResponse,\n  );\n  req.write(json);\n  req.end();\n}\n\n/**\n * Reaction to receiving the text response to a Telegram request.\n * @param {IncomingMessage} response\n */\nfunction receiveTgResponse(response) {\n  let data = \"\";\n  response.on(\"data\", (chunk) => (data += chunk));\n  response.on(\"end\", () => {\n    log(`[tg] response status code: ${response.statusCode}`);\n    log(\"[tg] response body:\", data);\n  });\n}\n\n/**\n * Form an HTML code for a Vangers game link for latter use in Telegram.\n * @param {VangersUpperLevelClient} client\n * @param {VangersGame} gameData\n * @return {string}\n */\nfunction getTgGameLink(client, gameData) {\n  return `<a href=\"${M.redirectHost}:${M.redirectPort}/r?s=${client.host}&p=${\n    client.port\n  }&g=${gameData.id}\">${censor(gameData.name.slice())}</a> (${gameData.mode})`;\n}\n// </editor-fold>\n\n// <editor-fold desc=\"Redirect server functions\">\n/**\n * Sends a redirect to a URL using Steam browser protocol in response to requests.\n * @param {IncomingMessage} request\n * @param {ServerResponse} response\n * @return {ServerResponse}\n */\nfunction redirectReqListener(request, response) {\n  const url = decodeURIComponent(request.url);\n  if (\n    url.slice(0, 3) === \"/r?\" &&\n    !!~url.indexOf(\"s=\") &&\n    !!~url.indexOf(\"p=\") &&\n    !!~url.indexOf(\"g=\")\n  ) {\n    const { s, p, g } = url\n      .split(\"&\")\n      .map((part) => part.slice(part.indexOf(\"=\") - 1).split(\"=\"))\n      .reduce((acc, [k, v]) => ({ ...acc, [k]: v }), {});\n    response.writeHead(302, {\n      Location: `steam://run/264080//-server ${s} -port ${p} -game ${g}/`,\n    });\n  } else {\n    response.writeHead(400);\n    response.write(\"Invalid redirect request format\");\n  }\n  return response.end();\n}\n// </editor-fold>\n\n// <editor-fold desc=\"Lifecycle\">\n/**\n * Prints a help message describing possible arguments of this script.\n */\nfunction printHelp() {\n  [\n    `Usage: node ${scriptFile} [OPTIONS]`,\n    \"\",\n    \"Options:\",\n    \"  --help, -h       Print this\",\n    \"  --silent, -s     Disable output\",\n  ].forEach((line) => console.log(line));\n}\n\n/**\n * Initializes this script.\n * @return {Promise<void>}\n */\nasync function init() {\n  if (argHelp) {\n    printHelp();\n    process.exit(0);\n  }\n\n  [\n    [configPath, \"Configuration file\"],\n    [badWordsLatinPath, \"Bad words file\"],\n    [badWordsCyrillicPath, \"Bad words file\"],\n    [exceptionsLatinPath, \"Exception words file\"],\n    [exceptionsCyrillicPath, \"Exception words file\"],\n  ].forEach((fp, fn) => {\n    if (!existsSync(fp)) {\n      log(`${fn} ${fp} was not found, aborting`);\n      process.exit(1);\n    }\n  });\n\n  Object.assign(M, readJson(configPath));\n  badWords.lat.push(...readArray(badWordsLatinPath));\n  badWords.cyr.push(...readArray(badWordsCyrillicPath));\n  exceptionWords.lat.push(...readArray(exceptionsLatinPath));\n  exceptionWords.cyr.push(...readArray(exceptionsCyrillicPath));\n\n  webServer = createServer(redirectServerOptions, redirectReqListener);\n  webServer.listen(M.redirectPort);\n\n  // Init pool of connections to Vangers' servers\n  M.servers.forEach((serverData) =>\n    initClient(`${serverData.host}:${serverData.port}`, serverData),\n  );\n}\n\ninit().then((r) => {\n  log(\"All clients in the pool were initialized\");\n});\n// </editor-fold>\n\n// @license-end\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","Socket","request","createServer","existsSync","readFileSync","dirname","basename","dir","__filename","scriptFile","args","process","argv","slice","argsI","indexOf","argHelp","argSilent","M","configPath","badWordsLatinPath","badWordsCyrillicPath","exceptionsLatinPath","exceptionsCyrillicPath","cp866","repeat","clientPool","Map","reactions","async","clientKey","log","requestGames","dataBuffer","pos","games","gamesCount","readUInt8","client","get","oldGames","newGames","gameIndex","length","gameName","tmpName","id","readUInt32LE","push","reduce","str","code","String","fromCharCode","decodeChar","split","name","filter","e","i","join","players","Number","parseInt","mode","gameModes","gameLetters","time","a","c","isNew","gamesRead","Object","entries","forEach","gameId","gameData","chatId","content","json","JSON","stringify","chat_id","parse_mode","disable_web_page_preview","text","req","host","port","tgPort","path","tgToken","method","headers","receiveTgResponse","write","end","sendToTgChat","tgChats","acc","getTgGameLink","globalThis","clearTimeout","lastTimeout","setTimeout","gameRequestCooldown","gameRequestTimeout","conditions","dataString","dataLength","protocol","badWords","cyr","lat","exceptionWords","censorCharmap","b","d","f","g","h","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","redirectServerOptions","webServer","date","Date","msg","map","value","toString","padStart","pad","console","distance","r1","r2","Math","min","readArray","fp","encoding","flag","initClient","type","alive","set","on","data","readUInt16LE","findIndex","disconnect","reconnectTimeout","connect","send","Buffer","alloc","destroy","lengthBuffer","writeInt16LE","concat","from","response","chunk","statusCode","redirectHost","redirectPort","src","censorData","exceptionData","realStr","tmpStr","tmpWord","toLowerCase","word","exceptionSensitivity","realLetter","replacementList","replacement","replaceAll","censorSensitivity","strStart","strEnd","result","random","getRndString","censor","redirectReqListener","url","decodeURIComponent","part","writeHead","Location","line","exit","fn","assign","parse","listen","servers","serverData","init","then"],"sourceRoot":""}